{"ast":null,"code":"//\nimport { createSlice } from '@reduxjs/toolkit';\nimport * as enums from '../../containers/utils/enums/Tarefa';\nconst initialState = {\n  itens: []\n};\nconst tarefasSlice = createSlice({\n  name: 'tarefas',\n  initialState,\n  reducers: {\n    remover: (state, action) => {\n      state.itens = [...state.itens.filter(tarefa => tarefa.id !== action.payload)];\n    },\n    editar: (state, action) => {\n      const indexDaTarefa = state.itens.findIndex(t => t.id === action.payload.id);\n      if (indexDaTarefa >= 0) {\n        state.itens[indexDaTarefa] = action.payload;\n      }\n    },\n    cadastrar: (state, action) => {\n      const tarefaJaExiste = state.itens.find(tarefa => tarefa.titulo.toLowerCase() === action.payload.titulo.toLowerCase());\n      if (tarefaJaExiste) {\n        alert('Il existe déjà une tâche portant ce nom');\n      } else {\n        const ultimaTarefa = state.itens[state.itens.length - 1];\n        const tarefaNova = {\n          ...action.payload,\n          id: ultimaTarefa ? ultimaTarefa.id + 1 : 1\n        };\n        state.itens.push(tarefaNova);\n      }\n    },\n    alteraStatus: (state, action) => {\n      const indexDaTarefa = state.itens.findIndex(t => t.id === action.payload.id);\n      if (indexDaTarefa >= 0) {\n        state.itens[indexDaTarefa].status = action.payload.finalizado ? enums.Status.CONCLUIDA : enums.Status.PENDENTE;\n      }\n    }\n  }\n});\nexport const {\n  remover,\n  editar,\n  cadastrar,\n  alteraStatus\n} = tarefasSlice.actions;\nexport default tarefasSlice.reducer;","map":{"version":3,"names":["createSlice","enums","initialState","itens","tarefasSlice","name","reducers","remover","state","action","filter","tarefa","id","payload","editar","indexDaTarefa","findIndex","t","cadastrar","tarefaJaExiste","find","titulo","toLowerCase","alert","ultimaTarefa","length","tarefaNova","push","alteraStatus","status","finalizado","Status","CONCLUIDA","PENDENTE","actions","reducer"],"sources":["/home/tales/Documents/GITHUB-PORTFOLIO/portfolio-10/notas/src/store/reducers/tarefas.ts"],"sourcesContent":["//\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport Tarefa from '../../models/Tarefas'\nimport * as enums from '../../containers/utils/enums/Tarefa'\n\ntype TarefasState = {\n  itens: Tarefa[]\n}\n\nconst initialState: TarefasState = {\n  itens: []\n}\n\nconst tarefasSlice = createSlice({\n  name: 'tarefas',\n  initialState,\n  reducers: {\n    remover: (state, action: PayloadAction<number>) => {\n      state.itens = [\n        ...state.itens.filter((tarefa) => tarefa.id !== action.payload)\n      ]\n    },\n    editar: (state, action: PayloadAction<Tarefa>) => {\n      const indexDaTarefa = state.itens.findIndex(\n        (t) => t.id === action.payload.id\n      )\n\n      if (indexDaTarefa >= 0) {\n        state.itens[indexDaTarefa] = action.payload\n      }\n    },\n    cadastrar: (state, action: PayloadAction<Omit<Tarefa, 'id'>>) => {\n      const tarefaJaExiste = state.itens.find(\n        (tarefa) =>\n          tarefa.titulo.toLowerCase() === action.payload.titulo.toLowerCase()\n      )\n\n      if (tarefaJaExiste) {\n        alert('Il existe déjà une tâche portant ce nom')\n      } else {\n        const ultimaTarefa = state.itens[state.itens.length - 1]\n\n        const tarefaNova = {\n          ...action.payload,\n          id: ultimaTarefa ? ultimaTarefa.id + 1 : 1\n        }\n        state.itens.push(tarefaNova)\n      }\n    },\n    alteraStatus: (\n      state,\n      action: PayloadAction<{ id: number; finalizado: boolean }>\n    ) => {\n      const indexDaTarefa = state.itens.findIndex(\n        (t) => t.id === action.payload.id\n      )\n\n      if (indexDaTarefa >= 0) {\n        state.itens[indexDaTarefa].status = action.payload.finalizado\n          ? enums.Status.CONCLUIDA\n          : enums.Status.PENDENTE\n      }\n    }\n  }\n})\n\nexport const { remover, editar, cadastrar, alteraStatus } = tarefasSlice.actions\n\nexport default tarefasSlice.reducer\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,OAAO,KAAKC,KAAK,MAAM,qCAAqC;AAM5D,MAAMC,YAA0B,GAAG;EACjCC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EAC/BK,IAAI,EAAE,SAAS;EACfH,YAAY;EACZI,QAAQ,EAAE;IACRC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAA6B,KAAK;MACjDD,KAAK,CAACL,KAAK,GAAG,CACZ,GAAGK,KAAK,CAACL,KAAK,CAACO,MAAM,CAAEC,MAAM,IAAKA,MAAM,CAACC,EAAE,KAAKH,MAAM,CAACI,OAAO,CAAC,CAChE;IACH,CAAC;IACDC,MAAM,EAAEA,CAACN,KAAK,EAAEC,MAA6B,KAAK;MAChD,MAAMM,aAAa,GAAGP,KAAK,CAACL,KAAK,CAACa,SAAS,CACxCC,CAAC,IAAKA,CAAC,CAACL,EAAE,KAAKH,MAAM,CAACI,OAAO,CAACD,EAAE,CAClC;MAED,IAAIG,aAAa,IAAI,CAAC,EAAE;QACtBP,KAAK,CAACL,KAAK,CAACY,aAAa,CAAC,GAAGN,MAAM,CAACI,OAAO;MAC7C;IACF,CAAC;IACDK,SAAS,EAAEA,CAACV,KAAK,EAAEC,MAAyC,KAAK;MAC/D,MAAMU,cAAc,GAAGX,KAAK,CAACL,KAAK,CAACiB,IAAI,CACpCT,MAAM,IACLA,MAAM,CAACU,MAAM,CAACC,WAAW,EAAE,KAAKb,MAAM,CAACI,OAAO,CAACQ,MAAM,CAACC,WAAW,EAAE,CACtE;MAED,IAAIH,cAAc,EAAE;QAClBI,KAAK,CAAC,yCAAyC,CAAC;MAClD,CAAC,MAAM;QACL,MAAMC,YAAY,GAAGhB,KAAK,CAACL,KAAK,CAACK,KAAK,CAACL,KAAK,CAACsB,MAAM,GAAG,CAAC,CAAC;QAExD,MAAMC,UAAU,GAAG;UACjB,GAAGjB,MAAM,CAACI,OAAO;UACjBD,EAAE,EAAEY,YAAY,GAAGA,YAAY,CAACZ,EAAE,GAAG,CAAC,GAAG;QAC3C,CAAC;QACDJ,KAAK,CAACL,KAAK,CAACwB,IAAI,CAACD,UAAU,CAAC;MAC9B;IACF,CAAC;IACDE,YAAY,EAAEA,CACZpB,KAAK,EACLC,MAA0D,KACvD;MACH,MAAMM,aAAa,GAAGP,KAAK,CAACL,KAAK,CAACa,SAAS,CACxCC,CAAC,IAAKA,CAAC,CAACL,EAAE,KAAKH,MAAM,CAACI,OAAO,CAACD,EAAE,CAClC;MAED,IAAIG,aAAa,IAAI,CAAC,EAAE;QACtBP,KAAK,CAACL,KAAK,CAACY,aAAa,CAAC,CAACc,MAAM,GAAGpB,MAAM,CAACI,OAAO,CAACiB,UAAU,GACzD7B,KAAK,CAAC8B,MAAM,CAACC,SAAS,GACtB/B,KAAK,CAAC8B,MAAM,CAACE,QAAQ;MAC3B;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAE1B,OAAO;EAAEO,MAAM;EAAEI,SAAS;EAAEU;AAAa,CAAC,GAAGxB,YAAY,CAAC8B,OAAO;AAEhF,eAAe9B,YAAY,CAAC+B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}